{
  "Update Secret": {
    "scope": "javascript,typescript",
    "prefix": "update_secret",
    "description": "Updates a secret from the secret storage.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const secretClient = Toolbelt.SecretClient();",
      "",
      "try {",
      "  const updatedSecret = { key: \"${1:YOUR_SECRET_NAME}\", value: \"${2:YOUR_SECRET_VALUE}\" };",
      "  await secretClient.updateSecret(updatedSecret);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Read Secret": {
    "scope": "javascript,typescript",
    "prefix": "read_secret",
    "description": "Reads a secret from the secret storage.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const secretClient = Toolbelt.SecretClient();",
      "",
      "try {",
      "  // secrets will be obtained from the Secret Store, and cached by default",
      "  // Prevent caching with secretClient.readSecret(\"secretName\", {useCache: false})",
      "  const { key, value } = await secretClient.readSecret(\"${1:YOUR_SECRET}\");",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "mTLS request": {
    "scope": "javascript,typescript",
    "prefix": "mtls_request",
    "description": "MTLS Client that allows you to communicate with MTLS Endpoints.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "try {",
      "  // Obtain an MTLS Client Instance from the Toolbelt",
      "  const mtlsClient = Toolbelt.MTLSClient({",
      "    key: \"${1:YOUR_KEY}\", // Be aware this will throw key or cert are malformed",
      "    cert: \"${2:YOUR_CERTIFICATE}\",",
      "  });",
      "",
      "  const URL = \"https://mtls-endpoint.com\";",
      "  const { statusCode, body } = await mtlsClient.post(",
      "    URL,",
      "    {}, // Your Headers",
      "    null, // Request Body",
      "    {",
      "      json: true, // Will attempt to parse request body",
      "      timeout: 10000, // Deadline for Request in MS",
      "      allowSelfSigned: false, // In case upstream uses self-signed, default false",
      "    }",
      "  );",
      "  switch (statusCode) {",
      "    case 200:",
      "      console.info(body);",
      "      break;",
      "    default:",
      "      console.error(\"Received unexpected status code\");",
      "      break;",
      "  }",
      "} catch (error) {",
      "  // Handle error based on your integration by providing a legit fallback operation.",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Query LP Domains with CSDS": {
    "scope": "javascript,typescript",
    "prefix": "query_lp_domains_with_csds",
    "description": "Get and cache the domain of a liveperson service with the CSDS client.",
    "body": [
      "import { Toolbelt, LpServices } from \"core-functions-toolbelt\";",
      "",
      "const domainClient = Toolbelt.CsdsClient();",
      "",
      "let msgHistDomain = \"\";",
      "",
      "try {",
      "  msgHistDomain = await domainClient.get(LpServices.${1:YOUR_SERVICE});",
      "} catch (${2:YOUR_ERRORNAME}) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Orchestrate Functions": {
    "scope": "javascript,typescript",
    "prefix": "orchestrate_functions",
    "description": "Call other functions of your account.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const orchestrator = Toolbelt.OrchestratorClient;",
      "",
      "try {",
      "  const invocations = [",
      "    {",
      "      uuid: \"${1:YOUR_FUNCTIONS_UUID}\",",
      "      headers: {",
      "        key: \"value\",",
      "      },",
      "      payload: {},",
      "    },",
      "  ];",
      "  const results = await orchestrator.invoke(invocations);",
      "  console.info(\"Orchestration successful\", results);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Fetch with retry": {
    "scope": "javascript,typescript",
    "prefix": "fetch_with_retry",
    "description": "Fetching a resource using fetch() and retrying on failure.",
    "body": [
      "async function fetchWithRetry(url, options = {}, retries = 3) {",
      "  for (let attempt = 1; attempt <= retries; attempt++) {",
      "    try {",
      "      const res = await fetch(url, options);",
      "",
      "      if (res.status >= 500) {",
      "        const error = new Error(`Server error ${res.status}`);",
      "        error.code = \"HTTP_ERROR\";",
      "        error.status = res.status;",
      "        throw error;",
      "      }",
      "",
      "      return res;",
      "    } catch (err) {",
      "      const shouldRetry =",
      "        [\"ECONNRESET\", \"ETIMEDOUT\", \"HTTP_ERROR\"].includes(err.code) ||",
      "        err.message.includes(\"Server error\");",
      "",
      "      if (attempt === retries || !shouldRetry) throw err;",
      "",
      "      console.error(",
      "        `${err.code || err.name} - Retrying ${url} attempt: ${attempt}`,",
      "        err",
      "      );",
      "",
      "      await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));",
      "    }",
      "  }",
      "}"
    ]
  },
  "Basic Fetch": {
    "scope": "javascript,typescript",
    "prefix": "basic_fetch",
    "description": "Simple http POST request using nodejs native fetch()",
    "body": [
      "try {",
      "  const res = await fetch(\"${1:YOUR_URL}\", {",
      "    method: \"POST\",",
      "    headers: {",
      "      \"Content-Type\": \"application/json\",",
      "    },",
      "    body: JSON.stringify({ key: \"value\" }),",
      "  });",
      "",
      "  if (!res.ok) {",
      "    console.info(`HTTP error: ${res.status}`);",
      "    return;",
      "  }",
      "",
      "  return await res.json();",
      "} catch (error) {",
      "  console.error(`Handle Response error: ${error.message}`);",
      "}"
    ]
  },
  "Basic Salesforce": {
    "scope": "javascript,typescript",
    "prefix": "basic_salesforce",
    "description": "Salesforce Client that is based on jsforce for connecting LivePerson Functions to any Salesforce system.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "const sfClient = Toolbelt.SFClient(); // For API Docs look @ https://jsforce.github.io/",
      "",
      "const con = sfClient.connectToSalesforce({",
      "  instanceUrl: \"${1:YOUR_SALESFORCE_URL}\",",
      "  accessToken: \"${2:YOUR_ACCESS_TOKEN}\",",
      "});",
      "",
      "const filterName = \"${3:YOUR_FILTER}\";",
      "const query = `SELECT id, LPSiteID1__c, Name, Website, Phone, Type, Industry, Description FROM Account WHERE Name like \"%${filterName}%\"`;",
      "con.query(query, function (error, queryResult) {",
      "  if (error) {",
      "    console.error(`Received following error message: ${error.message}`);",
      "  }",
      "  const [firstRecord] = queryResult.records;",
      "  const result = {",
      "    totalSize: queryResult.totalSize,",
      "    firstRecord: firstRecord,",
      "  };",
      "  console.info(result);",
      "});"
    ]
  },
  "Basic SDE Util": {
    "scope": "javascript,typescript",
    "prefix": "basic_sde_util",
    "description": "SDE Util allows SDE related methods, like adding SDEs or fetching SDEs from a conversation to be performed.",
    "body": [
      "import { Toolbelt, SDETypes } from \"core-functions-toolbelt\";",
      "const sdeUtil = Toolbelt.SDEUtil();",
      "",
      "// Define parameters",
      "const visitorId = \"${1:YOUR_VISITOR_ID}\";",
      "const sessionId = \"${2:YOUR_SESSION_ID}\";",
      "const sdes = [",
      "  {",
      "    type: SDETypes.PERSONAL_INFO,",
      "    personal: {",
      "      contacts: [",
      "        {",
      "          email: \"john.doe@example.com\",",
      "        },",
      "      ],",
      "    },",
      "  },",
      "];",
      "",
      "try {",
      "  const response = await sdeUtil.addSDEs(sdes, visitorId, sessionId);",
      "  console.info(response);",
      "",
      "  const sdesFromConvo = sdeUtil.getSDEsFromConv(${3:YOUR_CONVERSATION});",
      "  console.info(sdesFromConvo);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Basic Conversation Util": {
    "scope": "javascript,typescript",
    "prefix": "basic_conversation_util",
    "description": "Adds conversation related methods like fetching conversations or scanning for certain keywords.",
    "body": [
      "import { Toolbelt, ConversationContentTypes } from \"core-functions-toolbelt\";",
      "",
      "const conversationUtil = Toolbelt.ConversationUtil();",
      "",
      "// Define parameters",
      "const conversationId = \"${1:YOUR_CONVERSATION_ID}\";",
      "",
      "// Optional Filters",
      "const contentToRetrieve = [",
      "  ConversationContentTypes.SDES,",
      "  ConversationContentTypes.UNAUTH_SDES,",
      "];",
      "",
      "try {",
      "  // Get conversation",
      "  const conversation = await conversationUtil.getConversationById(",
      "    conversationId,",
      "    contentToRetrieve",
      "  );",
      "  // Determine Keywords",
      "  const keywords = [\"${2:YOUR_KEYWORD}\"];",
      "  // Scan conversation for keywords, result is an array of objects in form { message, sentTimestamp, sentBy }",
      "  const scannerResult = conversationUtil.scanConversationForKeywords(",
      "    conversation,",
      "    keywords",
      "  );",
      "  console.info(scannerResult);",
      "} catch (error) {",
      "  // Handle error based on your integration by providing a legit fallback operation.",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Update Property": {
    "scope": "javascript,typescript",
    "prefix": "update_property",
    "description": "import { Toolbelt } from \"core-functions-toolbelt\";",
    "body": [
      "",
      "const contextClient = Toolbelt.ContextServiceClient({",
      "  apiKey: \"${1:YOUR_DEVELOPER_KEY}\",",
      "  accountId: \"${2:YOUR_ACCOUNT_ID}\",",
      "});",
      "",
      "try {",
      "  // If no sessionId is passed, it will take the __default__ session.",
      "  const sessionProperties = await contextClient.updatePropertiesInNamespace(",
      "    \"${3:YOUR_NAMESPACE}\",",
      "    {",
      "      ${4:YOUR_PROPERTY}: \"${5:YOUR_VALUE}\",",
      "    },",
      "    \"${6:YOUR_SESSION_ID}\"",
      "  );",
      "",
      "  console.info(sessionProperties);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Read Property": {
    "scope": "javascript,typescript",
    "prefix": "read_property",
    "description": "Reads a property from the context session storage.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const contextClient = Toolbelt.ContextServiceClient({",
      "  apiKey: \"${1:YOUR_DEVELOPER_KEY}\",",
      "  accountId: \"${2:YOUR_ACCOUNT_ID}\",",
      "});",
      "",
      "try {",
      "  // If no sessionId is passed, it will take the __default__ session.",
      "  const sessionProperty = await contextClient.getPropertyInSession(",
      "    \"${3:YOUR_NAMESPACE}\",",
      "    \"${4:YOUR_PROPERTY}\",",
      "    \"${5:YOUR_SESSION_ID}\"",
      "  );",
      "  console.info(sessionProperty);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Delete Property": {
    "scope": "javascript,typescript",
    "prefix": "delete_property",
    "description": "Deletes a property in the context session storage.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const contextClient = Toolbelt.ContextServiceClient({",
      "  apiKey: \"${1:YOUR_DEVELOPER_KEY}\",",
      "  accountId: \"${2:YOUR_ACCOUNT_ID}\",",
      "});",
      "",
      "try {",
      "  await contextClient.deletePropertyInSession(",
      "    \"${3:YOUR_NAMESPACE}\",",
      "    \"${4:YOUR_PROPERTY}\",",
      "    \"${5:YOUR_SESSION_ID}\"",
      "  );",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  },
  "Create Namespace": {
    "scope": "javascript,typescript",
    "prefix": "create_namespace",
    "description": "Creates namespace in the context session storage.",
    "body": [
      "import { Toolbelt } from \"core-functions-toolbelt\";",
      "",
      "const contextClient = Toolbelt.ContextServiceClient({",
      "  apiKey: \"${1:YOUR_DEVELOPER_KEY}\",",
      "  accountId: \"${2:YOUR_ACCOUNT_ID}\",",
      "});",
      "",
      "try {",
      "  const namespace = await contextClient.createNamespace(\"${3:YOUR_NAMESPACE}\");",
      "  console.info(namespace.name);",
      "} catch (error) {",
      "  console.error(`Received following error message: ${error.message}`);",
      "}"
    ]
  }
}